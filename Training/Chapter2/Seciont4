/*
 ID: majesti2
 LANG: JAVA
 TASK: fracdec
*/

import java.util.*;
import java.io.*;
import java.lang.Math;

public class fracdec{
	private static boolean[] remainderB;

	public static void main(String[] args) throws IOException{
		BufferedReader f = new BufferedReader(new FileReader("fracdec.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("fracdec.out")));
		StringTokenizer st = new StringTokenizer(f.readLine());
		int nominator = Integer.parseInt(st.nextToken());
		int denominator = Integer.parseInt(st.nextToken());
		int beforeDecimal = nominator/denominator;
		nominator = nominator%denominator;
		boolean done = false;
		String result = "";
		if(nominator==0){
			done = true;
			result = (double)beforeDecimal+"";
		}
		if(!done){
		ArrayList<Integer> answers = new ArrayList<Integer>();
		ArrayList<Integer> remainders = new ArrayList<Integer>();
		remainderB = new boolean[denominator];
		String beforeRepeat = "";
		String repeat = "";
		int count = 0;
		while(true){
			nominator *=10;
			while(nominator<denominator) {answers.add(0); remainders.add(0);count++; nominator*=10;}
			answers.add(nominator/denominator);
			int remainder = nominator%denominator;
			if(remainder==0){
				for(int i=0;i<=count;i++) beforeRepeat += answers.get(i);
				break;
			}
			int index = -1;
			if(remainderB[remainder]) index = find(remainders,remainder);
			else remainderB[remainder] = true;
			if(index!=-1) {
				StringBuilder sb = new StringBuilder();
				for(int i=0;i<=index;i++) sb.append(answers.get(i));
				beforeRepeat = sb.toString();
				StringBuilder sb1 = new StringBuilder();
				for(int i=index+1;i<=count;i++) sb1.append(answers.get(i));
				repeat = sb1.toString();
				int i=beforeRepeat.length()-1;
				while(i>=0){
					int forwardIndex = beforeRepeat.length()-1-i;
					String check1 = beforeRepeat.substring(i);
					String check2 = repeat.substring(repeat.length()-1-forwardIndex);
					if(!check1.equals(check2)) break;
					i--;
				}
				String toAdd = beforeRepeat.substring(i+1);
				repeat = toAdd+repeat;
				repeat = repeat.substring(0,repeat.length()-toAdd.length());
				beforeRepeat = beforeRepeat.substring(0,i+1);
				break;
			}
			remainders.add(remainder);
			nominator = remainder;
			count++;
		}
		if(repeat.length()!=0){
			result = beforeDecimal+"."+beforeRepeat+"("+repeat+")";
		}
		else result = beforeDecimal+"."+beforeRepeat;
		}
		StringBuilder sb = new StringBuilder();
		for(int i=1;i<=result.length();i++){
			sb.append(result.substring(i-1,i));
			if(i%76==0) sb.append("\n");
		}
		if(result.length()%76!=0) sb.append("\n");
		out.print(sb);
		out.close();
	}

	public static int find(ArrayList<Integer> remainders, int target){
		for(int i=0;i<remainders.size();i++){
			if(remainders.get(i)==target) return i;
		}
		return -1;
	}
}