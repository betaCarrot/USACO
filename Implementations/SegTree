import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Segtree {
	private static int N;
	private static int[] sum, add;

	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(f.readLine());
		sum = new int[(N + 2) << 2 | 1];
		add = new int[(N + 2) << 2 | 1];
		build();
	}

	public static void build() {
		build(1, N, 1);
	}

	public static void update(int left, int right, int value) {
		update(left, right, value, 1, N, 1);
	}

	public static int query(int left, int right) {
		return query(left, right, 1, N, 1);
	}

	public static void build(int l, int r, int index) {
		if (l == r) {
			sum[index] = 0;
			return;
		}
		int m = (l + r) >> 1;
		build(l, m, index << 1);
		build(m + 1, r, index << 1 | 1);
		pushUp(index);
	}

	public static void update(int L, int R, int C, int l, int r, int index) {
		if (L <= l && r <= R) {
			add[index] += C;
			sum[index] += (r - l + 1) * C;
			return;
		}
		int m = (l + r) >> 1;
		pushDown(index, m - l + 1, r - m);
		if (L <= m) {
			update(L, R, C, l, m, index << 1);
		}
		if (R > m) {
			update(L, R, C, m + 1, r, index << 1 | 1);
		}
		pushUp(index);
	}

	public static int query(int L, int R, int l, int r, int index) {
		if (L <= l && r <= R) {
			return sum[index];
		}
		int m = (l + r) >> 1;
		pushDown(index, m - l + 1, r - m);
		int result = 0;
		if (L <= m) {
			result += query(L, R, l, m, index << 1);
		}
		if (R > m) {
			result += query(L, R, m + 1, r, index << 1 | 1);
		}
		return result;
	}

	public static void pushDown(int index, int ln, int rn) {
		if (add[index] != 0) {
			add[index << 1] += add[index];
			add[index << 1 | 1] += add[index];
			sum[index << 1] += add[index] * ln;
			sum[index << 1 | 1] += add[index] * rn;
			add[index] = 0;
		}
	}

	public static void pushUp(int index) {
		sum[index] = sum[index << 1] + sum[index << 1 | 1];
	}
}
