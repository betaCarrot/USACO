import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class haybales {
	public static int N;
	public static long[] sum, add, min, array;

	public static void main(String[] args) throws IOException {
		sum = new long[(N + 2) << 2 | 1];
		add = new long[(N + 2) << 2 | 1];
		min = new long[(N + 2) << 2 | 1];
		array = new long[N];
	}

	public static void build() {
		build(1, N, 1);
	}

	public static void update(int left, int right, int value) {
		update(left, right, value, 1, N, 1);
	}

	public static long querySum(int left, int right) {
		return querySum(left, right, 1, N, 1);
	}

	public static long queryMin(int left, int right) {
		return queryMin(left, right, 1, N, 1);
	}

	public static void build(int l, int r, int index) {
		if (l == r) {
			sum[index] = array[l - 1];
			min[index] = array[l - 1];
			return;
		}
		int m = (l + r) >> 1;
		build(l, m, index << 1);
		build(m + 1, r, index << 1 | 1);
		pushUp(index);
	}

	public static void update(int L, int R, int C, int l, int r, int index) {
		if (L <= l && r <= R) {
			add[index] += C;
			min[index] += C;
			sum[index] += (long) (r - l + 1) * C;
			return;
		}
		int m = (l + r) >> 1;
		pushDown(index, m - l + 1, r - m);
		if (L <= m) {
			update(L, R, C, l, m, index << 1);
		}
		if (R > m) {
			update(L, R, C, m + 1, r, index << 1 | 1);
		}
		pushUp(index);
	}

	public static long querySum(int L, int R, int l, int r, int index) {
		if (L <= l && r <= R) {
			return sum[index];
		}
		int m = (l + r) >> 1;
		pushDown(index, m - l + 1, r - m);
		long result = 0;
		if (L <= m) {
			result += querySum(L, R, l, m, index << 1);
		}
		if (R > m) {
			result += querySum(L, R, m + 1, r, index << 1 | 1);
		}
		return result;
	}

	public static long queryMin(int L, int R, int l, int r, int index) {
		if (L <= l && r <= R) {
			return min[index];
		}
		int m = (l + r) >> 1;
		pushDown(index, m - l + 1, r - m);
		long result = 1L << 60;
		if (L <= m) {
			result = Math.min(result, queryMin(L, R, l, m, index << 1));
		}
		if (R > m) {
			result = Math.min(result, queryMin(L, R, m + 1, r, index << 1 | 1));
		}
		return result;
	}

	public static void pushDown(int index, int ln, int rn) {
		if (add[index] != 0) {
			add[index << 1] += add[index];
			add[index << 1 | 1] += add[index];
			sum[index << 1] += add[index] * ln;
			sum[index << 1 | 1] += add[index] * rn;
			min[index << 1] += add[index];
			min[index << 1 | 1] += add[index];
			add[index] = 0;
		}
	}

	public static void pushUp(int index) {
		min[index] = Math.min(min[index << 1], min[index << 1 | 1]);
		sum[index] = sum[index << 1] + sum[index << 1 | 1];
	}
}
